/*
  Auther: Johnny
  Question 1: Is the value always positive?
  Question 2: How to deal with same value?
  Question 3: Is it OK to use recursive?

  Time complexicity: O(min(n1,n2))
  Space complexitty: O(1)
 */
public class Solution {
    private ListNode mRoot = null;
    private ListNode mCur = null;
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode l1Node = l1;
        ListNode l2Node = l2;
        
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        
        while (true) {
            if (l1Node != null && l2Node != null) {
                ListNode target = null;
                if (mRoot == null) {
                    if (l1Node.val <= l2Node.val) {
                        target = l1Node;
                        l1Node = l1Node.next;
                    } else {
                        target = l2Node;
                        l2Node = l2Node.next;
                    }
                    append(target);
                    continue;
                }
                int l1Diff = Math.abs(l1Node.val - mCur.val);
                int l2Diff = Math.abs(l2Node.val - mCur.val);
                if (l1Diff < l2Diff) {
                    target = l1Node;
                    l1Node = l1Node.next;
                    append(target);
                } else if (l1Diff > l2Diff) {
                    target = l2Node;
                    l2Node = l2Node.next;
                    append(target);
                } else {
                    target = l1Node;
                    l1Node = l1Node.next;
                    append(target);
                    
                    target = l2Node;
                    l2Node = l2Node.next;
                    append(target);
                } 
            } else if (l1Node == null && l2Node != null) {
                append(l2Node);
                return mRoot;
            } else if (l2Node == null && l1Node != null) {
                append(l1Node);
                return mRoot;
            } else {
                return mRoot;
            }
        }
    }
    
    private void append(ListNode node) {
        if (mRoot == null) {
            mRoot = node;
            mCur = node;
            return;
        }
        mCur.next = node;
        mCur = node;
    }
}